@model ReadAndLearn.Models.Pregunta
@using ReadAndLearn.Models;

@{
    ViewBag.Title = "CrearPregunta";
    Layout = "~/Views/Shared/_LayoutDocente.cshtml";
}

<h2>Crear Pregunta</h2>
<hr />
@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <fieldset>
        <legend>Pregunta</legend>

        <div class="editor-label">
            @Html.LabelFor(model => model.Enunciado)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Enunciado, new { id = "enunciado", style = "width:100%;" })
            @Html.ValidationMessageFor(model => model.Enunciado)
        </div>

        <hr />

        <div class="editor-label">
            @Html.Label("Claves (Separar palabras clave por el carácter \"/\")")
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.Claves, new { style = "width:100%;" })
            @Html.ValidationMessageFor(model => model.Claves)
        </div>

        <hr />
        <div class="editor-label">
            @Html.Label("Tipo de Pregunta")
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(m => m.TipoPreguntaID, new SelectList(ViewBag.Tipos, "TipoPreguntaID", "Tipo"), new { id = "tipoPreg" })
            @Html.ValidationMessageFor(model => model.TipoPreguntaID)
        </div>
        <hr />
        <div class="editor-label">
            @Html.Label("Identificador de Tarea")
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.TareaID)
            @Html.ValidationMessageFor(model => model.TareaID)
        </div>
        <hr />
        <div class="editor-label">
            @Html.Label("Feedback de Acierto")
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.FDBK_Correcto)
            @Html.ValidationMessageFor(model => model.FDBK_Correcto)
        </div>
        <hr />
        <div class="editor-label">
            @Html.Label("Feedback de Fallo")
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.FDBK_Incorrecto)
            @Html.ValidationMessageFor(model => model.FDBK_Incorrecto)
        </div>
        <hr />
        <div class="editor-label">
            @Html.Label("Pertinente")
            <button id="addPertinentes">Añadir pertinentes</button>
            <button id="cleanPertinentes">Limpiar</button>

        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Pertinente)
            @Html.ValidationMessageFor(model => model.Pertinente)
        </div>

        <!-- guirisan /issues https://github.com/guirisan/ituinbook/issues/79 -->
        <div class="editor-label">
            @Html.Label("Distractoras")
            <button id="addDistractoras">Añadir distractoras</button>
            <button id="cleanDistractoras">Limpiar</button>
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.Distractoras)
            @Html.ValidationMessageFor(model => model.Distractoras)
        </div>
        

        <div id="textraw">
            @{
                Texto text = ViewBag.Texto;
                List<string> list = new List<string>();
                if (text != null)
                {
                    foreach (Pagina pag in text.Paginas)
                    {
                        <h3>Pagina @pag.Orden</h3>
                        <div>
                            <p>
                                @Html.Raw(pag.Contenido)
                            </p>
                        </div>
                
                    }

                }
            }

        </div>
        <hr />    
        <div class="editor-label">
                @Html.LabelFor(model => model.Orden)
            </div>
            <div class="editor-field">
                @Html.EditorFor(model => model.Orden)
                @Html.ValidationMessageFor(model => model.Orden)
            </div>

            <hr />

            <div class="editor-label">
                @Html.Label("Explicacion de la respuesta (sólo para la plantilla con explicación)")
            </div>
            <div class="editor-field">
                @Html.TextAreaFor(model => model.Explicacion)
                @Html.ValidationMessageFor(model => model.Explicacion)
            </div>
            <hr />
        <p>
            <input id="btnSend" type="submit" value="Crear" />
        </p>
    </fieldset>
}

<div>
    @Html.ActionLink("Volver", "AdministrarTexto", new { TextoID = ViewBag.Texto.TextoID })
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")
     
    <script src="~/Content/KendoUI/js/kendo.web.min.js"></script>
    
    <link href="~/Content/KendoUI/styles/kendo.common.min.css" rel="stylesheet" />
    <link href="~/Content/KendoUI/styles/kendo.default.min.css" rel="stylesheet" />
    <link href="~/Content/KendoUI/styles/kendo.all.min.js" rel="stylesheet" />
    
    <script type="text/javascript">
        $(document).ready(function () {
            //guirisan/issues https://github.com/guirisan/ituinbook/issues/79

            //después de añadir las paginas como elementos de textraw, declaramos el acordeon
            $("#textraw").accordion();
            
            /*PERTINENTES*************************/
            //start
            //capturamos selección del usuario, extraemos id's, y si ninguno tiene ya asignada pertinencia o distraccion,
            //añadimos la lista de id's a campo pertinentes del formulario (1,2,4,5,6,8,14,16,17,18,19,20
            $("#addPertinentes").click(function (e) {
                e.preventDefault()
                console.log("click over addPertinentes");

                var selectedhtml = $.selection('html');
                var duplicatedSelection = false;

                $('<div />').html(selectedhtml).find("[data-windex]").each(function (id, val) {
                    if (!duplicatedSelection) {
                        /*
                        var existingids = $("textbeforeadd").val();
                        var existingids = existingids + textbeforeadd;*/

                        //esta variable solo se usa para añdir los valores seleccionados si procede más adelante
                        var textbeforeadd = $("textarea#Pertinente").val();

                        var actualIndex = $(this).attr("data-windex");


                        var existingids = $("textarea#Pertinente").val();
                        if (existingids != null) {
                            //ya hay palabras pertinentes

                            existingids = existingids.split(",");


                            if (existingids.indexOf(actualIndex) > -1) {
                                alert("ERROR: algunas palabras seleccionadas ya están asignadas como pertinentes o distractoras.");
                                duplicatedSelection = true;
                            } else {
                                $("textarea#Pertinente").val(textbeforeadd + $(this).attr("data-windex") + ",");
                                $("[data-windex='" + actualIndex + "']").addClass('pertinentePalabra');
                            }
                        } else {
                            //no hay palabras pertinentes
                            $("textarea#Pertinente").val(textbeforeadd + $(this).attr("data-windex") + ",");
                            $("[data-windex='" + actualIndex + "']").addClass('pertinentePalabra');
                        }
                    }
                });


            });
            //end

            //cleanPertinentes
            $("#cleanPertinentes").click(function (e) {
                e.preventDefault();
                $("textarea#Pertinente").val("");
                $(".pertinentePalabra").removeClass("pertinentePalabra");

            });

            /*DISTRACTORAS*****************************************/
            //start
            //capturamos selección del usuario, extraemos id's, y si ninguno tiene ya asignada pertinencia o distraccion,
            //añadimos la lista de id's a campo distractoras del formulario (1,2,4,5,6,8,14,16,17,18,19,20
            $("#addDistractoras").click(function (e) {
                e.preventDefault()
                console.log("click over addDistractoras");

                var selectedhtml = $.selection('html');
                var duplicatedSelection = false;

                $('<div />').html(selectedhtml).find("[data-windex]").each(function (id, val) {
                    if (!duplicatedSelection) {
                        /*
                        var existingids = $("textbeforeadd").val();
                        var existingids = existingids + textbeforeadd;*/

                        //esta variable solo se usa para añdir los valores seleccionados si procede más adelante
                        var textbeforeadd = $("textarea#Distractoras").val();

                        var actualIndex = $(this).attr("data-windex");


                        var existingids = $("textarea#Distractoras").val();
                        if (existingids != null) {
                            //ya hay palabras pertinentes

                            existingids = existingids.split(",");


                            if (existingids.indexOf(actualIndex) > -1) {
                                alert("ERROR: algunas palabras seleccionadas ya están asignadas como pertinentes o distractoras.");
                                duplicatedSelection = true;
                            } else {
                                $("textarea#Distractoras").val(textbeforeadd + $(this).attr("data-windex") + ",");
                                $("[data-windex='" + actualIndex + "']").addClass('distractoraPalabra');
                            }
                        } else {
                            //no hay palabras distractoras
                            $("textarea#Distractoras").val(textbeforeadd + $(this).attr("data-windex") + ",");
                            $("[data-windex='" + actualIndex + "']").addClass('distractoraPalabra');
                        }
                    }
                });


            });
            //end

            //cleanDistractoras
            $("#cleanDistractoras").click(function (e) {
                e.preventDefault();
                $("textarea#Pertinente").val("");
                $(".distractoraPalabra").removeClass("distractoraPalabra");

            });


            var items = [];
            
            var window = $("#window"),
                        undo = $("#undo")
                                .bind("click", function () {
                                    window.data("kendoWindow").open();
                                    undo.hide();
                                });
            /*
            var onClose = function () {
                undo.show();
            }

            window.kendoWindow({               
                title: "Pertinentes y distractoras",                
                close: onClose,
                visible: false
            });

            undo.show();            
            */
            $("#optional").kendoMultiSelect({                
                dataSource: items
            });

            $("#tipoPreg").kendoDropDownList({
                dataTextField: "ProductName",
                dataValueField: "ProductID"
            });

            //create AutoComplete UI component
            $("#enunciado").kendoAutoComplete({              
                placeholder: "Introduce el enunciado..."                
            });

            $("#enunciado").focusout(function () {
                var enun = $("#enunciado").val();
                var palabras = enun.split(' ');

                items = [];
                
                $.each( palabras, function(index, value) {
                    items.push(value);
                })

                $("#claves").data("kendoMultiSelect").setDataSource(items);               
            });

            $("#claves").kendoMultiSelect({
                dataSource: items               
            });

            $("#datepicker").kendoDatePicker();
            
            
            $("#menuCategorias").kendoMenu({
                orientation: "vertical"
            }).css({
                width: auto,
                marginRight: "220px"
            });

        });
    </script>
}
